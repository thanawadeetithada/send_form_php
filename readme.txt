# ระบบสมาชิกและล็อกอินพื้นฐาน (Login & Registration System)

โปรเจกต์นี้เป็นตัวอย่างระบบสมัครสมาชิกและล็อกอินพื้นฐานที่มีฟีเจอร์ด้านความปลอดภัยเบื้องต้น เช่น การป้องกัน CSRF, การเข้ารหัสรหัสผ่าน, และระบบ Remember Me พร้อมการจัดการ Session Timeout

## ฟีเจอร์หลัก

- **สมัครสมาชิก (Register)**: ผู้ใช้สามารถสร้างบัญชีใหม่ด้วย Username และ Password  
- **เข้าสู่ระบบ (Login)**: ล็อกอินด้วย Username/Password และสามารถเลือก “Remember Me” เพื่อจดจำผู้ใช้ เมื่อกลับมาใช้งานอีกครั้งไม่ต้องกรอก Password ใหม่  
- **ออกจากระบบ (Logout)**: เมื่อผู้ใช้ต้องการออกจากระบบ สามารถกด Logout เพื่อทำลาย Session และ Cookie ที่เกี่ยวข้อง  
- **โปรไฟล์ (Profile)**: ผู้ใช้ที่ล็อกอินแล้วสามารถเข้าถึงหน้าโปรไฟล์ดูข้อมูลบัญชีของตนได้  
- **Session Timeout**: หากไม่มีการใช้งานนานเกินเวลาที่กำหนด (เช่น 30 นาที) ระบบจะบังคับออกจากระบบอัตโนมัติ เพิ่มความปลอดภัย  
- **CSRF Protection**: ใช้ CSRF Token ในฟอร์มสำคัญ (เช่น สมัครสมาชิก, ล็อกอิน) ป้องกันการโจมตี CSRF  
- **Password Hashing**: ใช้ `password_hash()` และ `password_verify()` เพื่อเข้ารหัสรหัสผ่านอย่างปลอดภัย เก็บในฐานข้อมูลแบบเข้ารหัส ไม่ใช่ Plain Text  
- **PDO + Prepared Statements**: ใช้ PDO พร้อม Prepared Statements เพื่อลดความเสี่ยง SQL Injection  
- **จำกัดจำนวนครั้งล็อกอินผิด**: หากล็อกอินผิดหลายครั้งเกินกำหนด ระบบจะบล็อกไม่ให้ล็อกอินชั่วคราว ช่วยป้องกันการโจมตีด้วยการเดารหัสผ่านต่อเนื่อง (Brute Force)  
- **ป้องกันการ Cache หน้าเว็บ**: ตั้งค่า Header เพื่อป้องกันไม่ให้ Browser เก็บ Cache หน้าสำคัญ (เช่น Login, Register) เพื่อให้ข้อมูลอัปเดตเสมอ และไม่แสดงหน้าเก่าที่ค้างอยู่ในเบราว์เซอร์  

## โครงสร้างไฟล์ (Project Structure)

login-register/
├─ public/
│  ├─ index.php           // หน้าแรกหลังล็อกอิน
│  ├─ login.php           // หน้าแสดงฟอร์มล็อกอิน
│  ├─ login_db.php        // ไฟล์ประมวลผลการล็อกอิน
│  ├─ register.php        // หน้าแสดงฟอร์มสมัครสมาชิก
│  ├─ register_db.php     // ไฟล์ประมวลผลการสมัครสมาชิก
│  ├─ profile.php         // หน้าโปรไฟล์ผู้ใช้ (ต้องล็อกอิน)
│  ├─ logout.php          // หน้าออกจากระบบ
│  ├─ includes/           // เก็บไฟล์ส่วนประกอบใช้งานร่วมกัน
│  │   ├─ config.php      // ข้อมูลตั้งค่าการเชื่อมต่อฐานข้อมูล
│  │   ├─ connection.php  // ฟังก์ชันเชื่อมต่อฐานข้อมูลผ่าน PDO
│  │   ├─ functions.php   // ฟังก์ชันช่วยเหลือ (check_session_timeout, check_remember_me, etc.)
│  │   ├─ header.php      // ส่วนหัว HTML + Navbar (include ในหน้าต่าง ๆ)
│  │   └─ footer.php      // ส่วน Script, ปิดแท็ก </body> และ </html>
│  ├─ css/
│  │   └─ style.css       // ไฟล์ CSS สำหรับตกแต่งหน้าตาเว็บ
│  ├─ js/                 // (ถ้ามี) ไฟล์ JavaScript
│  └─ images/             // (ถ้ามี) ไฟล์รูปภาพ
└─ database/
   └─ login_db.sql        // ไฟล์ SQL สำหรับสร้างตาราง users หรือข้อมูลเริ่มต้น


## ขั้นตอนการติดตั้ง (Installation)

1. **เตรียมฐานข้อมูล**  
   - สร้างฐานข้อมูล MySQL ชื่อ `login_db` (หรือชื่ออื่นตามต้องการ)  
   - นำเข้าไฟล์ `login_db.sql` ลงในฐานข้อมูล โดยใช้ phpMyAdmin หรือเครื่องมืออื่น ๆ

2. **ตั้งค่าการเชื่อมต่อฐานข้อมูล**  
   - เปิดไฟล์ `includes/config.php`  
   - แก้ค่าการเชื่อมต่อฐานข้อมูล เช่น:
     ```php
     define('DB_HOST', 'localhost');
     define('DB_USER', 'root');
     define('DB_PASSWORD', '');
     define('DB_NAME', 'login_db');
     ```
   - ปรับค่าให้ตรงกับค่าจริงของเซิร์ฟเวอร์คุณ

3. **รันโปรเจกต์บนเซิร์ฟเวอร์จำลอง (Localhost)**  
   - วางโปรเจกต์ในโฟลเดอร์ที่เซิร์ฟเวอร์จำลองเข้าถึงได้ เช่น `htdocs` บน XAMPP  
   - เปิดเบราว์เซอร์เข้าหน้า: `http://localhost/login-register/public/login.php`  
     (ปรับตามชื่อโฟลเดอร์โปรเจกต์)

## วิธีการใช้งาน (Usage)

- **สมัครสมาชิก**: ไปที่ `register.php` กรอก Username/Password แล้วกด Register หากสำเร็จระบบจะล็อกอินให้อัตโนมัติ  
- **ล็อกอิน**: ไปที่ `login.php` กรอก Username/Password หากเลือก Remember Me เมื่อกลับมาในครั้งถัดไป ระบบจะจดจำผู้ใช้โดยไม่ต้องกรอกรหัสผ่านซ้ำ  
- **โปรไฟล์**: ไปที่ `profile.php` เพื่อดูข้อมูลบัญชี (ต้องล็อกอินก่อน)  
- **ออกจากระบบ**: ไปที่ `logout.php` ระบบจะลบ Session และ Cookie แล้วส่งกลับไปหน้า login  
- **Session Timeout**: หากไม่มีการใช้งานในระบบนานเกินเวลาที่กำหนด (30 นาที) เมื่อโหลดหน้าถัดไป ระบบจะบังคับ Logout อัตโนมัติ
- **ทดสอบโดยใช้ username/password ตามนี้ได้เลย
	admin / Password1!
	user / Password1!

## ความปลอดภัย (Security)

- **CSRF**: ฟอร์ม Login และ Register ฝัง CSRF token เพื่อตรวจสอบก่อนประมวลผล ลดความเสี่ยงการโจมตี CSRF  
- **Password Hashing**: รหัสผ่านถูกเข้ารหัสด้วย `password_hash()` เพื่อความปลอดภัย ป้องกันการเก็บรหัสผ่านเป็น Plain Text  
- **SQL Injection Protection**: ใช้ Prepared Statements (PDO) สำหรับคำสั่ง SQL  
- **Remember Me Token Hashing**: เก็บ token ที่แฮชแล้วในฐานข้อมูล เพิ่มความปลอดภัยในการจำผู้ใช้
- **Limit Login Attempts & Remember Me Token Hashing**: ป้องกันการโจมตี Brute Force และดูแลความปลอดภัยของฟีเจอร์จำผู้ใช้
- **Session Timeout: เพิ่มความปลอดภัย โดยบังคับล็อกเอาท์ผู้ใช้เมื่อไม่มีการใช้งานนานเกินเวลาที่กำหนด
- **Cache Control: ตั้งค่า Header เพื่อป้องกันไม่ให้ Browser เก็บ Cache หน้า Login/Register ช่วยป้องกันการแสดงข้อมูลเก่าที่ไม่เหมาะสม

## การต่อยอด (Future Improvements)
- **เพิ่มระบบ ลืมรหัสผ่าน (Password Reset)
- **เพิ่มฟีเจอร์ ยืนยันอีเมลหลังสมัครสมาชิก
- **รองรับ Role-based Access Control สำหรับแยกสิทธิ์ผู้ใช้งาน
- **ปรับปรุง UI ให้สวยงามยิ่งขึ้นด้วย Frontend Framework เช่น Bootstrap 5 หรือ Tailwind CSS

## สรุป
โค้ดนี้เป็นจุดเริ่มต้นที่ดีสำหรับมือใหม่ในการเรียนรู้และพัฒนาระบบสมาชิก-ล็อกอินอย่างมีมาตรฐาน พร้อมฟีเจอร์ด้านความปลอดภัยขั้นพื้นฐานและการจัดการที่เป็นระเบียบ สามารถนำไปต่อยอดได้ง่ายในอนาคต

"เรารับซัพพอร์ตเฉพาะปัญหาที่เกิดจากบั๊กในระบบสมาชิกของเราเอง เช่น Error ที่เกิดจากฟังก์ชัน Login, Register, CSRF token, ฯลฯ โดยไม่รวมถึงการปรับแต่งโค้ดหรือเชื่อมต่อกับโปรเจกต์ภายนอกนะครับ/ค่ะ หากต้องการเปลี่ยนแปลง Layout หรือเชื่อมกับระบบอื่น ลูกค้าต้องดำเนินการเองหรือจ้างผู้พัฒนาท่านอื่นเพิ่มเติมครับ"




